# Removing sample S1049L from original dataset (intermediate response).
data_T <- read.csv("TNFalpha_counts.csv", row.names = 1)
data_T <- data_T[, !colnames(data_T) %in% "S1049L"]
meta_T<- read.csv("TNFalpha_sample_info.csv", sep =",", row.names = 1)
meta_T <- meta_T[rownames(meta_T) != "S1049L", ]
# 56284 initial observations.18195 observations after filtering low counts for large sample size.
data_T <- na.omit(data_T[rowSums(data_T) >= 100, ])
# Checking that sample names match in both files and are in same order. Both output TRUE.
all(colnames(data_T) %in% rownames(meta_T))
all(colnames(data_T) == rownames(meta_T))
# Building variables to store gene symbols and sample IDs for subsequent data manipulation.
gene <- rownames(data_T)
id <- colnames(data_T)
# DESeqDataSet Object General exploration of all factor levels without any discrimination. Reference is set as Low Response. Sex is set as covariate.
meta_T$group <- relevel(factor(meta_T$group), ref = "low")
dds_T <- DESeqDataSetFromMatrix(countData = data_T, colData = meta_T, design = ~ group + sex)
setwd("/home/ioana/Desktop/MMB5010_IOANA_NEAMTU_DISSERTATION_SUBMISSION/R_DEG_ANALYSIS_PIPELINE/")
# ENVIRONMENT SETUP (R 4.0.3).
# CRAN (The Comprehensive R Archive Network) and Bioconductor (BiocManager version 3.17)
# For differential analysis of count data.
library(DESeq2) #version 1.40.2
# To load the tidyverse packages dplyr 1.1.4 and ggplot2 3.5.1.
library(tidyverse) #version 2.0.0
# To use with tidyverse ggplot2 to prevent overlapping labels.
library(ggrepel) #version 0.9.5
# To draw clustered heatmaps.
library(pheatmap) #version 1.0.12
# Produces publication-ready volcano plots.
library(EnhancedVolcano) #version 1.18.0
# Provides an interface for querying SQLite data storage annotation database OrgDb.
library(AnnotationDbi) #version 1.66.0
# Bioconductor annotation data package.
library(org.Hs.eg.db) #version 3.17.0
# To analyze and visualize functional profiles of gene and gene clusters.
library(clusterProfiler) #version 4.8.3
# For consistent, tidy string manipulation and text formatting.
library(stringr) #version 1.5.1
# Removing sample S1049L from original dataset (intermediate response).
data_T <- read.csv("TNFalpha_counts.csv", row.names = 1)
data_T <- data_T[, !colnames(data_T) %in% "S1049L"]
meta_T<- read.csv("TNFalpha_sample_info.csv", sep =",", row.names = 1)
meta_T <- meta_T[rownames(meta_T) != "S1049L", ]
# 56284 initial observations.18195 observations after filtering low counts for large sample size.
data_T <- na.omit(data_T[rowSums(data_T) >= 100, ])
# Checking that sample names match in both files and are in same order. Both output TRUE.
all(colnames(data_T) %in% rownames(meta_T))
all(colnames(data_T) == rownames(meta_T))
# Building variables to store gene symbols and sample IDs for subsequent data manipulation.
gene <- rownames(data_T)
id <- colnames(data_T)
# DESeqDataSet Object General exploration of all factor levels without any discrimination. Reference is set as Low Response. Sex is set as covariate.
meta_T$group <- relevel(factor(meta_T$group), ref = "low")
dds_T <- DESeqDataSetFromMatrix(countData = data_T, colData = meta_T, design = ~ group + sex)
# Investigating size factors.
dds_T <- estimateSizeFactors(dds_T)
data.frame(Sample = names(sizeFactors(dds_T)), SizeFactor = sizeFactors(dds_T))
plot(sizeFactors(dds_T), main = "LPS TNF-alpha - Size Factors")
text(x = 32, y = 0.0806, labels = "S3013L (0.0806)", pos = 3, col = "darkred")
text(x = 34, y = 1.45,  labels = "S3019L (1.7096)", pos = 3, col = "darkred")
highlight_vals <- c(0.0806, 1.7096)
for (val in highlight_vals) {
index <- which(round(sizeFactors(dds_T), 4) == val)
if (length(index) > 0) {
points(index, rep(val, length(index)), col = "darkred", pch = 21, bg = "white", lwd = 2)
}
}
normalized_counts_T <- counts(dds_T, normalized=TRUE)
write.table(normalized_counts_T, file="LPS_TNFalpha_normalised_counts.txt", sep="\t", quote=F, col.names=NA)
unnormalized_counts_T <- counts(dds_T, normalized=FALSE)
write.table(unnormalized_counts_T, file="LPS_TNFalpha_unnormalised_counts.txt", sep="\t", quote=F, col.names=NA)
# Removing the dependence of the variance on the mean through variance stabilizing transformation.
# blind=TRUE: unbiased by the experimental design or known sources of variation.
rld_T <- vst(dds_T, blind=TRUE)
# Performing PCA on the variance-stabilized data.
pca_res_T <- prcomp(assay(rld_T), scale. = TRUE)
# Calculating variances of each PC.
var_explained_T <- pca_res_T$sdev^2 / sum(pca_res_T$sdev^2)
# Obtaining the loading values for both PC1 and PC2, as the PCA plot bellow identifies two distinct populations explained by PC1, along with further stratification in the variance explained by PC2.
loadings_T_PC1 <- pca_res_T$rotation[, 1]
loadings_T_PC2 <- pca_res_T$rotation[, 2]
# Sorting the loadings to find genes with the highest contribution.
sorted_loadings_T_PC1 <- sort(loadings_T_PC1, decreasing = TRUE)
sorted_loadings_T_PC2 <- sort(loadings_T_PC2, decreasing = TRUE)
# Creating a data frame of genes and their loadings.
loading_df_T_PC1 <- data.frame(Gene = names(sorted_loadings_T_PC1), Loading = sorted_loadings_T_PC1)
loading_df_T_PC2 <- data.frame(Gene = names(sorted_loadings_T_PC2), Loading = sorted_loadings_T_PC2)
# Writing the loading information to CSV files.
write.csv(loading_df_T_PC1, file = "TNFalpha_PCA_loadings_PC1.csv", row.names = FALSE)
write.csv(loading_df_T_PC2, file = "TNFalpha_PCA_loadings_PC2.csv", row.names = FALSE)
# Plotting PCA (labelled).
pcaData_T <- plotPCA(rld_T, intgroup = c("group", "sex"), returnData = TRUE)
# Plotting PC1 vs PC2.
ggplot(pcaData_T, aes_string(x = "PC1", y = "PC2", color = "group", shape = "sex")) +
geom_point(size = 3) +
geom_text_repel(aes(label = rownames(pcaData_T)), size = 5) +
ggtitle("PCA Plot LPS TNF-alpha Responses - PC1 vs PC2") +
xlab(paste0("PC1: ", round(100 * attr(pcaData_T, "percentVar")[1], 2), "% variance")) +
ylab(paste0("PC2: ", round(100 * attr(pcaData_T, "percentVar")[2], 2), "% variance")) +
theme_minimal()
# Scree plot of descending eigenvalues.
plot(var_explained_T, xlab = "Principal Component", ylab = "Proportion of Variance Explained", type = 'b', pch = 19, main = "LPS TNF-alpha: Variance Scree Plot")
# Hierarchical clustering.
rld_mat_T <- assay(rld_T)
rld_cor_T <- cor(rld_mat_T)
pheatmap(rld_cor_T, labels_row = paste0(dds_T$group), labels_col = paste0(rownames(meta_T)), fontsize_row = 6, fontsize_col = 6) + theme_test()
# DGE using negative binomial distribution and setting reference factor level as "low", to compare high responders to low responders.
meta_T$group <- relevel(factor(meta_T$group), ref = "low")
dds_T <- DESeqDataSetFromMatrix(countData = data_T, colData = meta_T, design = ~ group + sex)
# Running analysis with Wald test.
dds_T <- DESeq(dds_T)
Wald_T <- nbinomWaldTest(dds_T)
results(Wald_T)
summary(results(Wald_T))
# Extracting counts matrix and calculating raw column sums.
col_sums_T <- colSums(counts(dds_T, normalized= FALSE))
# Filtering raw column sums less than 5,000,000 (S3013L, 1168165).
filtered_col_sums_T <- col_sums_T[col_sums_T < 5000000]
# Plotting total number of raw counts per sample.
plot(col_sums_T, main = "Total Raw Counts per Sample - LPS TNF-alpha")
# Extracting counts matrix and calculating normalized column sums.
col_sums_T_norm <- colSums(counts(dds_T, normalized= TRUE))
# Filtering normalized column sums less than 5,000,000 (none).
filtered_col_sums_T_norm <- col_sums_T_norm[col_sums_T_norm < 5000000]
# Plotting total number of normalized counts per sample.
plot(col_sums_T_norm, main = "Total Normalized Counts per Sample - LPS TNF-alpha")
# Looking at dispersion estimates for diagnosis: plotting the per-gene dispersion estimates together with the fitted mean-dispersion relationship.
plotDispEsts(dds_T, ylim = c(1e-6, 1e2), main = "Dispersion Estimates for LPS TNF-alpha in Monocytes: Fitted Mean-Dispersion Relationship")
# Defining pair-wise contrasts: low response as base level; coef = 2 (2 levels).
contrast_condition_T <- c("group", "high", "low")
# Saving corrected (shrunken) log2FC (for downstream GSEA analysis).
DGE_table_condition_T <- lfcShrink(dds_T, contrast=contrast_condition_T, coef=2, type="ashr")
# MA plot.
plotMA(DGE_table_condition_T, main="Type ashr LPS TNF-alpha")
# Summarizing results
summary(DGE_table_condition_T)
# Exploring results in DESeqResults object (column info).
mcols(DGE_table_condition_T, use.names=T)
# Assigning gene symbols as row names.
rownames(DGE_table_condition_T) <- gene
# Saving results as data frame table. 18256 observations.
DGE_table_condition_T_df <- data.frame(DGE_table_condition_T)
DGE_table_condition_T_df$symbol <- rownames(DGE_table_condition_T_df)
write.table(DGE_table_condition_T_df, file="DGE_results_high_vs_low_LPS_TFN-alpha.txt", sep="\t", quote=F, col.names=NA)
# Subsetting the tibble table by filtering by adjused p-value significance of <= 0.1.
sigDE_table_condition_T <- DGE_table_condition_T_df %>%
dplyr::filter(padj <= 0.01)
# Ordering highest to lowest Log2FoldChange values.
sigDE_table_condition_T <- sigDE_table_condition_T[order(sigDE_table_condition_T$log2FoldChange, decreasing = TRUE), ]
# Top 5 high and low log2FC values.
# HIGH
head(sigDE_table_condition_T, 5)
# LOW
tail(sigDE_table_condition_T, 5)
# Saving table of significant DEGs ordered by LFC value. - with covariate, went from 430 observations, to 27.
write.table(sigDE_table_condition_T, file="sigDE_padj<=0.01_LPS_TNF-alpha_table_condition_Type_ashr.txt", sep="\t", quote=F, col.names=NA)
# Filtering significant results (where src = shrunken results with contrast).
src_T <- na.omit(subset(DGE_table_condition_T, padj <= 0.01))
plotMA(src_T, ylim = c(-3,3), main="MA Plot with Type ashr Shrinkage and Contrast With Sex Covariate (padj <= 0.1) - LPS TNF-alpha")
# Converting data frame into tibble with explicitly presented "gene" names in a column for further analysis and visualization.
src_tb_T <- src_T %>%
data.frame() %>%
rownames_to_column(var = "symbol") %>%
as_tibble()
# Further exploring results.
summary(src_T)
DGE_table_condition_T_tb <- DGE_table_condition_T %>%
data.frame() %>%
rownames_to_column(var = "symbol") %>%
as_tibble()
EnhancedVolcano(DGE_table_condition_T_tb,
title = "LPS TNF-alpha Differentially Expressed Genes",
lab = (DGE_table_condition_T_tb$symbol),
x = 'log2FoldChange',
y = 'pvalue')
# Using mapIds to map gene symbols to ENSEMBL IDs, for integrating and managing gene annotations effectively for further analysis.
src_tb_T$ensgene <- src_tb_T$symbol
src_tb_T$ensgene <- mapIds(org.Hs.eg.db,
keys = src_tb_T$ensgene,
column = "ENSEMBL",
keytype = "SYMBOL",
multiVals = "first")
# Saving annotated version (not filtered by significance).
write.table(src_tb_T, file="sig_DGE_results_LPS_TNF-alpha_annotated.txt", sep="\t", quote=F, col.names=NA)
src_tb_TNF <- na.omit(subset(src_tb_T, symbol != "" & symbol != "NA" & ensgene != "" & ensgene != "NA" & baseMean > 50))
# Further exploring results
summary(src_tb_TNF)
# Upregulated
src_tb_up_TNF <- subset(src_tb_TNF, log2FoldChange > 0)
#src_tb_up_TNF$ensgene <- sapply(src_tb_up_TNF$ensgene, paste, collapse = ";")
# Sorting descending by log2FC.
src_tb_up_TNF <- src_tb_up_TNF[order(src_tb_up_TNF$log2FoldChange, decreasing = TRUE), ]
write.csv(src_tb_up_TNF, file = "DGE_UP_TNF-alpha.csv")
write.table(src_tb_up_TNF[, 7], "DGE_UP_TNF-alpha_gene_ensemblID.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(src_tb_up_TNF[, 1], "DGE_UP_TNF-alpa_gene_symbols.txt", row.names = FALSE, col.names = FALSE)
head(src_tb_up_TNF$symbol, 100)
# Downregulated
src_tb_down_TNF <- subset(src_tb_TNF, log2FoldChange < 0)
src_tb_down_TNF <- src_tb_down_TNF[order(src_tb_down_TNF$log2FoldChange, decreasing = FALSE), ]
write.csv(src_tb_down_TNF, file = "DGE_DOWN_TNF-alpha.csv")
write.table(src_tb_down_TNF[, 7], "DGE_DOWN_TNF-alpha_gene_ensemblID.txt", row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(src_tb_down_TNF[, 1], "DGE_DOWN_TNF-alpha_gene_symbols.txt", row.names = FALSE, col.names = FALSE)
head(src_tb_down_TNF$symbol, 100)
GO_results_pos_BP_TNF <- enrichGO(gene = src_tb_up_TNF$symbol, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
GO_res_pos_df_BP_TNF <- as.data.frame(GO_results_pos_BP_TNF)
GO_results_pos_CC_TNF <- enrichGO(gene = src_tb_up_TNF$symbol, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "CC")
GO_res_pos_df_CC_TNF <- as.data.frame(GO_results_pos_CC_TNF)
GO_results_pos_MF_TNF <- enrichGO(gene = src_tb_up_TNF$symbol, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
GO_res_pos_df_MF_TNF <- as.data.frame(GO_results_pos_MF_TNF)
barplot(GO_results_pos_BP_TNF, showCategory = 10) +
ggtitle("GO +ve BP  (padj <= 0.01) - TNF-alpha LPS-Treated Monocytes") +
theme(plot.title = element_text(face = "bold"))
barplot(GO_results_pos_CC_TNF, showCategory = 10) +
ggtitle("GO +ve CC  (padj <= 0.01) - TNF-alpha LPS-Treated Monocytes") +
theme(plot.title = element_text(face = "bold"))
barplot(GO_results_pos_MF_TNF, showCategory = 10) +
ggtitle("GO +ve MF   (padj <= 0.01) - TNF-alpha LPS-Treated Monocytes") +
theme(plot.title = element_text(face = "bold"))
all_GO<- rbind(GO_res_pos_df_BP_TNF, GO_res_pos_df_CC_TNF, GO_res_pos_df_MF_TNF)
# Sort by adjusted p-value
top10_GO <- all_GO %>%
arrange(p.adjust) %>%
slice(1:10)
top10_GO$Description <- str_wrap(top10_GO$Description, width = 30)
ggplot(top10_GO, aes(x = reorder(Description, p.adjust),
y = Count,
fill = -log10(p.adjust))) +
geom_bar(stat = "identity") +
scale_fill_gradient(high = "#E06663", low = "#327EBA") +
labs(title = "TNF-alpha LPS-Treated Monocytes: Positively Enriched Gene Ontology Terms (BP, CC, MF)",
x = "GO Term",
y = "Gene Count",
fill = "-log10(Adjusted p-value)") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 30, hjust = 0.5),
axis.text.x = element_text(size = 25, angle = 85, hjust = 1),
axis.text.y = element_text(size = 25),
axis.title = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 24)
)
GO_results_neg_BP_TNF <- enrichGO(gene = src_tb_down_TNF$symbol, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
GO_res_neg_df_BP_TNF <- as.data.frame(GO_results_neg_BP_TNF)
GO_results_neg_CC_TNF <- enrichGO(gene = src_tb_down_TNF$symbol, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "CC")
GO_res_neg_df_CC_TNF <- as.data.frame(GO_results_neg_CC_TNF)
GO_results_neg_MF_TNF <- enrichGO(gene = src_tb_down_TNF$symbol, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
GO_res_neg_df_MF_TNF <- as.data.frame(GO_results_neg_MF_TNF)
barplot(GO_results_neg_BP_TNF, showCategory = 10) +
ggtitle("GO -ve BP  (padj <= 0.01) - TNF-alpha LPS-Treated Monocytes") +
theme(plot.title = element_text(face = "bold"))
barplot(GO_results_neg_CC_TNF, showCategory = 10) +
ggtitle("GO -ve CC  (padj <= 0.01) - TNF-alpha LPS-Treated Monocytes") +
theme(plot.title = element_text(face = "bold"))
# lenght zero
#barplot(GO_results_neg_MF_TNF, showCategory = 10) +
#ggtitle("GO -ve MF (padj <= 0.01) - TNF-alpha LPS-Treated Monocytes") +
#theme(plot.title = element_text(face = "bold"))
all_GO<- rbind(GO_res_neg_df_BP_TNF, GO_res_neg_df_CC_TNF, GO_res_neg_df_MF_TNF)
top10_GO <- all_GO %>%
arrange(p.adjust) %>%
slice(1:10)
top10_GO$Description <- str_wrap(top10_GO$Description, width = 30)
ggplot(top10_GO, aes(x = reorder(Description, p.adjust),
y = Count,
fill = -log10(p.adjust))) +
geom_bar(stat = "identity") +
scale_fill_gradient(high = "#E06663", low = "#327EBA") +
labs(title = "TNF-alpha LPS-Treated Monocytes: Negatively Enriched Gene Ontology Terms (BP, CC, MF)",
x = "GO Term",
y = "Gene Count",
fill = "-log10(Adjusted p-value)") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 30, hjust = 0.5),
axis.text.x = element_text(size = 25, angle = 85, hjust = 1),
axis.text.y = element_text(size = 25),
axis.title = element_text(size = 25),
legend.title = element_text(size = 25),
legend.text = element_text(size = 24)
)
low_males <- subset(meta_T, group == "low" & sex == "Male")
# Block of Code for Building Input Files in GSEA Software:
# Getting gene symbols from expression matrix.
gene_symbols <- rownames(normalized_counts_T)
# Map ping symbols to Ensembl IDs using org.Hs.eg.db.
symbol_to_ensembl <- mapIds(org.Hs.eg.db,
keys = gene_symbols,
column = "ENSEMBL",
keytype = "SYMBOL",
multiVals = "first")
# Removing NAs and creating a data frame.
symbol_to_ensembl <- na.omit(symbol_to_ensembl)
expression_df <- as.data.frame(normalized_counts_T)
# Keeping only rows with matching Ensembl IDs.
expression_df <- expression_df[rownames(expression_df) %in% names(symbol_to_ensembl), ]
# Adding Ensembl ID column.
expression_df$EnsemblID <- symbol_to_ensembl[rownames(expression_df)]
# Renaming EnsemblID column to NAME and add Description.
expression_df$NAME <- expression_df$EnsemblID
expression_df$Description <- "NA"
# Reordering columns: NAME, Description, then all samples.
sample_columns <- setdiff(colnames(expression_df), c("EnsemblID", "NAME", "Description"))
expression_gct <- expression_df[, c("NAME", "Description", sample_columns)]
# Ensuring no row names.
rownames(expression_gct) <- NULL
# Dimensions for GSEA format.
num_rows <- nrow(expression_gct)
num_cols <- ncol(expression_gct) - 2  # To exclude NAME and Description
# Building the phenotype file:
# Defining the rows.
row1 <- "37 2 1"
row2 <- "# high low"
expresion_meta_T <- meta_T$group
row3 <- paste(expresion_meta_T, collapse = "\t")
# Creating and writing to the file in the current working directory.
#writeLines(c(row1, row2, row3), con = "phenotype_labels_GSEA_file_LPS_TNFalpha.cls")
